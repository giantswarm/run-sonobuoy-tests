#! /bin/sh
set -e

kubeconfig_path="${KUBECONFIG_PATH:-"/workspace/cluster/kubeconfig"}"
results_path="${RESULTS_PATH:-"/workspace/cluster/sonobuoy-results.tar"}"

log() {
  echo "[$(date -u +%FT%TZ)]" "$@"
}

run_cis() {
  log "Running cis"
  sonobuoy run \
    --namespace "${NAMESPACE}" \
    --kubeconfig "$kubeconfig_path" \
    --plugin https://raw.githubusercontent.com/vmware-tanzu/sonobuoy-plugins/master/cis-benchmarks/kube-bench-plugin.yaml \
    --plugin https://raw.githubusercontent.com/vmware-tanzu/sonobuoy-plugins/master/cis-benchmarks/kube-bench-master-plugin.yaml \
    --plugin-env kube-bench-master.KUBERNETES_VERSION=1.16 --plugin-env kube-bench-node.KUBERNETES_VERSION=1.16 \
    --wait
}

run_cncf() {
  log "Running cncf"
  sonobuoy run --namespace "${NAMESPACE}" --kubeconfig "$kubeconfig_path" --mode=certified-conformance --wait
}

run_giantswarm() {
  log "Running giantswarm"
  sonobuoy run \
    --kubeconfig "$kubeconfig_path" \
    --namespace "${NAMESPACE}" \
    --plugin https://raw.githubusercontent.com/giantswarm/sonobuoy-plugin/master/giantswarm-plugin.yaml \
    --plugin-env giantswarm.TC_KUBECONFIG="$(cat "${TC_KUBECONFIG_PATH}")" \
    --plugin-env giantswarm.CP_KUBECONFIG="$(cat "${KUBECONFIG_PATH}")" \
    --plugin-env giantswarm.CLUSTER_ID="$(cat "${CLUSTER_ID_PATH}")" \
    --mode=certified-conformance \
    --wait
}

print_results() {
  log "Status"
  sonobuoy status --namespace "${NAMESPACE}" --kubeconfig "$kubeconfig_path"

  outfile=$(sonobuoy retrieve --namespace "${NAMESPACE}" --kubeconfig "$kubeconfig_path")

  log "Results summary"
  sonobuoy results "$outfile"

  log "Detailed results"
  sonobuoy results "$outfile" --mode detailed

  log "Moving results to ${results_path}"
  mv "$outfile" "$results_path"
}

check_if_failed() {
  if sonobuoy status --namespace "${NAMESPACE}" --kubeconfig "$kubeconfig_path" | grep failed >/dev/null; then
    log "Tests failed"
    exit 1
  fi
}

cleanup() {
  if [ $? != 0 ]; then
    log "Sonobuoy logs"
    sonobuoy logs --namespace "${NAMESPACE}" --kubeconfig "$kubeconfig_path"
  fi

  log "Deleting sonobuoy resources"
  sonobuoy delete --namespace "${NAMESPACE}" --kubeconfig "$kubeconfig_path" --all --wait || true
}

trap cleanup INT TERM EXIT

case "$1" in
cis)
  export NAMESPACE="sonobuoy"
  run_cis
  print_results
  ;;
cncf)
  export NAMESPACE="sonobuoy"
  run_cncf
  print_results
  check_if_failed
  ;;
giantswarm)
  # Since this plugin runs on the Management Cluster we need a different namespace to allow parallel pipeline execution.
  NAMESPACE="$(cat "${CLUSTER_ID_PATH}")-sonobuoy"
  export NAMESPACE
  run_giantswarm
  print_results
  check_if_failed
  ;;
*)
  log "Unknown test mode: $1"
  exit 1
  ;;
esac
